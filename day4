let str = "malayalam";
let split = str.split("");
console.log(split);
let split1 =split.reverse();
console.log(split1)
let join1 = split1.join("");
if(str == join1){
    console.log(true);
}else{
    console.log(false);
}
/*for(i=0;i<split.length;i++){
    for(j=split.length-1;j>=0;j--){
        if (split[i]==split[j]){
            console.log("palindrome");
        }
    }
}*/
let obj1 = {
    a:1,
    b:2,
    c:3
};
let obj2 = [1,3,8];
for(let key in obj2){
    console.log(key,obj2[key]);
}
for(let key of obj2){
    console.log(key);
}
num_arr = [1,2,3,4,5];
num_arr.forEach((ele)=>{
    console.log(ele*ele);
})
let str_arr = ['dhabu','akal'];
str_arr.forEach((ele)=>console.log(ele.repeat(3)));

//map
let arr =  num_arr.map(ele => console.log(ele*ele));

//filter
let num_filter = num_arr.filter(ele=>{
    return 100;
})
console.log(num_filter);

//array of objects
let names_obj = [
    {
        name : 'dhabu',
        dob : 2004
    },
    {
        name : 'elakkiya',
        dob : 2002
    },
    {
        name : 'akalya',
        dob : 2003
    }
];
/*let ans_names = names_obj.map(ele=>{
    if (ele.dob >=2003) return ele.name;
})*/
let ans_names = names_obj.filter(ele => ele.dob>=2003).map(ele => ele.name);
console.log(ans_names);

//shallow copy
const array =[1,2,3,4,5];
//const array2 = [...array];//spread operator
const array2 = array;//shallow copy
array[2]=100;
console.log(array2,array);

//duplicate values
const obj_cp3={
    name : "sece",
    year : "2023",
    name : "sri eshwar"
};
console.log(obj_cp3);

//task
let task=[
    {
        name : "dhabu",
        age : 23,
        salary : 60000
    },
    {
        name : "Akalaya",
        age : 27,
        salary : 10000
    },
    {
        name : "Arul Prathiksha",
        age : 47,
        salary : 70000
    },
    {
        name : "Abinaya",
        age : 50,
        salary : 50000
    },
    {
        name : "Divya",
        age : 20,
        salary : 20000
    },
    {
        name : "Santhiya",
        age : 28,
        salary : 80000
    }
];
let arr_obj5 = task.filter(ele => ele.salary >=25000).map(ele => ({name: ele.name, age :ele.age}));
//let arr_obj2 = arr_obj.map(ele => ele.name,ele.age);
console.log(arr_obj5);

//destructuring array --> unpacking
let arr_nums = [10,20,30,40,50,60,70];
let [a1,a2, ,a3,a4, ...a5] = arr_nums;   //(...)rest operator  [must be last]
console.log(a1,a2,a3,a4,a5);

let arr_nums2 = [10,20,30,40,50,60,70,80,90,100];
let [b1,b2,,b3,b4,...b5]=arr_nums2;
console.log(b1,b2,b3,b4,b5);

// destructuring object elements
let obj_1={
    clg_name : "sece",
    year :2023,
    city:"cbe",
    dept : "mech",
    lpa : "50lpa"
};
//let {clg_name : college,year,city, ...rest}=obj_1;
let {clg_name : college,year,city,colour= "green", ...rest}=obj_1; // rename operator
console.log(college,year,city,colour,rest); //default parameters

setTimeout(() => console.log("hello"), 3000);
//setInterval(() => console.log("hello"), 1000);

//promise
//state  = pending,resolve,reject
//api call
const abc =fetch('https://jsonplaceholder.typicode.com/todos');
abc.then((response)=>response.json())
.then ((data)=>console.log(data[0]))
.catch((error)=>{console.log('error',error)});

const promiesx = new Promise((resolve,reject) => {
    setTimeout(()=> {
        reject("resolved")
    },4000)
})
promiesx
.then((value)=> console.log(value))
.catch(() => console.log('error'));
const apiCall =async()=>{
    const promise_from_api = await fetch('https://jsonplaceholder.typicode.com/todos');
    const data = await promise_from_api.json();
    console.log(data);
}
apiCall();
